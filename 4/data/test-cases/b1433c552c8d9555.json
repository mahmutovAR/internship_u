{"uid":"b1433c552c8d9555","name":"Авторизация на странице Login Page","fullName":"tests.test_login_page#test_log_in","historyId":"9f8c5ede3a8e34ca34fe7b416b85d9d6","time":{"start":1735063657060,"stop":1735063657070,"duration":10},"description":"\n    Цель: Проверить авторизацию\n\n    Предусловие:\n        - Открыть браузер\n\n    Шаги:\n        1. Открыть страницу с формой\n        2. Ввести данные в поле \"Username\"\n        3. Ввести данные в поле \"Password\"\n        4. Ввести данные в поле \"Username *\"\n        5. Кликнуть кнопку \"Login\"\n        6. Проверить, что отображается сообщение об успешной авторизации\n\n    Ожидаемый результат:\n        - Авторизация прошла успешно\n        - Отображается сообщение об успешной авторизации","descriptionHtml":"<pre><code>Цель: Проверить авторизацию\n\nПредусловие:\n    - Открыть браузер\n\nШаги:\n    1. Открыть страницу с формой\n    2. Ввести данные в поле &quot;Username&quot;\n    3. Ввести данные в поле &quot;Password&quot;\n    4. Ввести данные в поле &quot;Username *&quot;\n    5. Кликнуть кнопку &quot;Login&quot;\n    6. Проверить, что отображается сообщение об успешной авторизации\n\nОжидаемый результат:\n    - Авторизация прошла успешно\n    - Отображается сообщение об успешной авторизации\n</code></pre>\n","status":"broken","statusMessage":"selenium.common.exceptions.InvalidArgumentException: Message: invalid argument\n  (Session info: chrome=131.0.6778.139)\nStacktrace:\n#0 0x558d1ed3231a <unknown>\n#1 0x558d1e84853d <unknown>\n#2 0x558d1e83000f <unknown>\n#3 0x558d1e82e615 <unknown>\n#4 0x558d1e82ed3a <unknown>\n#5 0x558d1e84b009 <unknown>\n#6 0x558d1e8dab35 <unknown>\n#7 0x558d1e8bb462 <unknown>\n#8 0x558d1e8d9ed7 <unknown>\n#9 0x558d1e8bb203 <unknown>\n#10 0x558d1e889cc0 <unknown>\n#11 0x558d1e88ac9e <unknown>\n#12 0x558d1ecffd0b <unknown>\n#13 0x558d1ed03c92 <unknown>\n#14 0x558d1ececb3c <unknown>\n#15 0x558d1ed04807 <unknown>\n#16 0x558d1ecd20df <unknown>\n#17 0x558d1ed21578 <unknown>\n#18 0x558d1ed21740 <unknown>\n#19 0x558d1ed31196 <unknown>\n#20 0x7f74d689ca94 <unknown>\n#21 0x7f74d6929c3c <unknown>","statusTrace":"browser = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"0105f7abdfd79ef0c96cb7bd45d578b5\")>\nusername = '', password = '', username_desc = '-AB'\n\n    @allure.severity(severity_level.CRITICAL)\n    @allure.epic(\"Smoke тест\")\n    @allure.feature(\"Авторизация\")\n    @allure.testcase(\"Задачи U1, U2\")\n    @allure.story(\"Авторизация с корректными данными проходит успешно\")\n    @allure.title(\"Авторизация на странице Login Page\")\n    @allure.description(\n        \"\"\"\n        Цель: Проверить авторизацию\n    \n        Предусловие:\n            - Открыть браузер\n    \n        Шаги:\n            1. Открыть страницу с формой\n            2. Ввести данные в поле \"Username\"\n            3. Ввести данные в поле \"Password\"\n            4. Ввести данные в поле \"Username *\"\n            5. Кликнуть кнопку \"Login\"\n            6. Проверить, что отображается сообщение об успешной авторизации\n    \n        Ожидаемый результат:\n            - Авторизация прошла успешно\n            - Отображается сообщение об успешной авторизации\"\"\")\n    @pytest.mark.parametrize('username, password, username_desc',\n                             [(LoginData.username, LoginData.password, f'{LoginData.username}-AB')])\n    def test_log_in(browser: fixture, username: str, password: str, username_desc: str):\n        login_page = LoginPage(browser)\n>       login_page.open_login_page()\n\ntests/test_login_page.py:111: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npages/login_page.py:12: in open_login_page\n    self.open_url(PageUrls.login_page)\npages/base_page.py:14: in open_url\n    self.driver.get(url)\n/opt/hostedtoolcache/Python/3.12.8/x64/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py:393: in get\n    self.execute(Command.GET, {\"url\": url})\n/opt/hostedtoolcache/Python/3.12.8/x64/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py:384: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f17c53965a0>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"invalid argument\",\"message\":\"invalid argument\\\\n  (Session info: chrome=1...\\\\n#19 0x558d1ed31196 \\\\u003Cunknown>\\\\n#20 0x7f74d689ca94 \\\\u003Cunknown>\\\\n#21 0x7f74d6929c3c \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.InvalidArgumentException: Message: invalid argument\nE         (Session info: chrome=131.0.6778.139)\nE       Stacktrace:\nE       #0 0x558d1ed3231a <unknown>\nE       #1 0x558d1e84853d <unknown>\nE       #2 0x558d1e83000f <unknown>\nE       #3 0x558d1e82e615 <unknown>\nE       #4 0x558d1e82ed3a <unknown>\nE       #5 0x558d1e84b009 <unknown>\nE       #6 0x558d1e8dab35 <unknown>\nE       #7 0x558d1e8bb462 <unknown>\nE       #8 0x558d1e8d9ed7 <unknown>\nE       #9 0x558d1e8bb203 <unknown>\nE       #10 0x558d1e889cc0 <unknown>\nE       #11 0x558d1e88ac9e <unknown>\nE       #12 0x558d1ecffd0b <unknown>\nE       #13 0x558d1ed03c92 <unknown>\nE       #14 0x558d1ececb3c <unknown>\nE       #15 0x558d1ed04807 <unknown>\nE       #16 0x558d1ecd20df <unknown>\nE       #17 0x558d1ed21578 <unknown>\nE       #18 0x558d1ed21740 <unknown>\nE       #19 0x558d1ed31196 <unknown>\nE       #20 0x7f74d689ca94 <unknown>\nE       #21 0x7f74d6929c3c <unknown>\n\n/opt/hostedtoolcache/Python/3.12.8/x64/lib/python3.12/site-packages/selenium/webdriver/remote/errorhandler.py:232: InvalidArgumentException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"description":"\n    Цель: Проверить авторизацию\n\n    Предусловие:\n        - Открыть браузер\n\n    Шаги:\n        1. Открыть страницу с формой\n        2. Ввести данные в поле \"Username\"\n        3. Ввести данные в поле \"Password\"\n        4. Ввести данные в поле \"Username *\"\n        5. Кликнуть кнопку \"Login\"\n        6. Проверить, что отображается сообщение об успешной авторизации\n\n    Ожидаемый результат:\n        - Авторизация прошла успешно\n        - Отображается сообщение об успешной авторизации","status":"broken","statusMessage":"selenium.common.exceptions.InvalidArgumentException: Message: invalid argument\n  (Session info: chrome=131.0.6778.139)\nStacktrace:\n#0 0x558d1ed3231a <unknown>\n#1 0x558d1e84853d <unknown>\n#2 0x558d1e83000f <unknown>\n#3 0x558d1e82e615 <unknown>\n#4 0x558d1e82ed3a <unknown>\n#5 0x558d1e84b009 <unknown>\n#6 0x558d1e8dab35 <unknown>\n#7 0x558d1e8bb462 <unknown>\n#8 0x558d1e8d9ed7 <unknown>\n#9 0x558d1e8bb203 <unknown>\n#10 0x558d1e889cc0 <unknown>\n#11 0x558d1e88ac9e <unknown>\n#12 0x558d1ecffd0b <unknown>\n#13 0x558d1ed03c92 <unknown>\n#14 0x558d1ececb3c <unknown>\n#15 0x558d1ed04807 <unknown>\n#16 0x558d1ecd20df <unknown>\n#17 0x558d1ed21578 <unknown>\n#18 0x558d1ed21740 <unknown>\n#19 0x558d1ed31196 <unknown>\n#20 0x7f74d689ca94 <unknown>\n#21 0x7f74d6929c3c <unknown>","statusTrace":"browser = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"0105f7abdfd79ef0c96cb7bd45d578b5\")>\nusername = '', password = '', username_desc = '-AB'\n\n    @allure.severity(severity_level.CRITICAL)\n    @allure.epic(\"Smoke тест\")\n    @allure.feature(\"Авторизация\")\n    @allure.testcase(\"Задачи U1, U2\")\n    @allure.story(\"Авторизация с корректными данными проходит успешно\")\n    @allure.title(\"Авторизация на странице Login Page\")\n    @allure.description(\n        \"\"\"\n        Цель: Проверить авторизацию\n    \n        Предусловие:\n            - Открыть браузер\n    \n        Шаги:\n            1. Открыть страницу с формой\n            2. Ввести данные в поле \"Username\"\n            3. Ввести данные в поле \"Password\"\n            4. Ввести данные в поле \"Username *\"\n            5. Кликнуть кнопку \"Login\"\n            6. Проверить, что отображается сообщение об успешной авторизации\n    \n        Ожидаемый результат:\n            - Авторизация прошла успешно\n            - Отображается сообщение об успешной авторизации\"\"\")\n    @pytest.mark.parametrize('username, password, username_desc',\n                             [(LoginData.username, LoginData.password, f'{LoginData.username}-AB')])\n    def test_log_in(browser: fixture, username: str, password: str, username_desc: str):\n        login_page = LoginPage(browser)\n>       login_page.open_login_page()\n\ntests/test_login_page.py:111: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npages/login_page.py:12: in open_login_page\n    self.open_url(PageUrls.login_page)\npages/base_page.py:14: in open_url\n    self.driver.get(url)\n/opt/hostedtoolcache/Python/3.12.8/x64/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py:393: in get\n    self.execute(Command.GET, {\"url\": url})\n/opt/hostedtoolcache/Python/3.12.8/x64/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py:384: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f17c53965a0>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"invalid argument\",\"message\":\"invalid argument\\\\n  (Session info: chrome=1...\\\\n#19 0x558d1ed31196 \\\\u003Cunknown>\\\\n#20 0x7f74d689ca94 \\\\u003Cunknown>\\\\n#21 0x7f74d6929c3c \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.InvalidArgumentException: Message: invalid argument\nE         (Session info: chrome=131.0.6778.139)\nE       Stacktrace:\nE       #0 0x558d1ed3231a <unknown>\nE       #1 0x558d1e84853d <unknown>\nE       #2 0x558d1e83000f <unknown>\nE       #3 0x558d1e82e615 <unknown>\nE       #4 0x558d1e82ed3a <unknown>\nE       #5 0x558d1e84b009 <unknown>\nE       #6 0x558d1e8dab35 <unknown>\nE       #7 0x558d1e8bb462 <unknown>\nE       #8 0x558d1e8d9ed7 <unknown>\nE       #9 0x558d1e8bb203 <unknown>\nE       #10 0x558d1e889cc0 <unknown>\nE       #11 0x558d1e88ac9e <unknown>\nE       #12 0x558d1ecffd0b <unknown>\nE       #13 0x558d1ed03c92 <unknown>\nE       #14 0x558d1ececb3c <unknown>\nE       #15 0x558d1ed04807 <unknown>\nE       #16 0x558d1ecd20df <unknown>\nE       #17 0x558d1ed21578 <unknown>\nE       #18 0x558d1ed21740 <unknown>\nE       #19 0x558d1ed31196 <unknown>\nE       #20 0x7f74d689ca94 <unknown>\nE       #21 0x7f74d6929c3c <unknown>\n\n/opt/hostedtoolcache/Python/3.12.8/x64/lib/python3.12/site-packages/selenium/webdriver/remote/errorhandler.py:232: InvalidArgumentException","steps":[{"name":"Открыть страницу с формой","time":{"start":1735063657060,"stop":1735063657069,"duration":9},"status":"broken","statusMessage":"selenium.common.exceptions.InvalidArgumentException: Message: invalid argument\n  (Session info: chrome=131.0.6778.139)\nStacktrace:\n#0 0x558d1ed3231a <unknown>\n#1 0x558d1e84853d <unknown>\n#2 0x558d1e83000f <unknown>\n#3 0x558d1e82e615 <unknown>\n#4 0x558d1e82ed3a <unknown>\n#5 0x558d1e84b009 <unknown>\n#6 0x558d1e8dab35 <unknown>\n#7 0x558d1e8bb462 <unknown>\n#8 0x558d1e8d9ed7 <unknown>\n#9 0x558d1e8bb203 <unknown>\n#10 0x558d1e889cc0 <unknown>\n#11 0x558d1e88ac9e <unknown>\n#12 0x558d1ecffd0b <unknown>\n#13 0x558d1ed03c92 <unknown>\n#14 0x558d1ececb3c <unknown>\n#15 0x558d1ed04807 <unknown>\n#16 0x558d1ecd20df <unknown>\n#17 0x558d1ed21578 <unknown>\n#18 0x558d1ed21740 <unknown>\n#19 0x558d1ed31196 <unknown>\n#20 0x7f74d689ca94 <unknown>\n#21 0x7f74d6929c3c <unknown>\n\n","statusTrace":"  File \"/home/runner/work/internship_u/internship_u/pages/login_page.py\", line 12, in open_login_page\n    self.open_url(PageUrls.login_page)\n  File \"/home/runner/work/internship_u/internship_u/pages/base_page.py\", line 14, in open_url\n    self.driver.get(url)\n  File \"/opt/hostedtoolcache/Python/3.12.8/x64/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py\", line 393, in get\n    self.execute(Command.GET, {\"url\": url})\n  File \"/opt/hostedtoolcache/Python/3.12.8/x64/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py\", line 384, in execute\n    self.error_handler.check_response(response)\n  File \"/opt/hostedtoolcache/Python/3.12.8/x64/lib/python3.12/site-packages/selenium/webdriver/remote/errorhandler.py\", line 232, in check_response\n    raise exception_class(message, screen, stacktrace)\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true},{"name":"Скриншот упавшего теста","time":{"start":1735063657070,"stop":1735063657160,"duration":90},"status":"passed","steps":[],"attachments":[{"name":"Test failure screenshot","type":"image/png","size":0}],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":1,"hasContent":true}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":2,"attachmentsCount":1,"hasContent":true},"afterStages":[],"labels":[{"name":"epic","value":"Smoke тест"},{"name":"feature","value":"Авторизация"},{"name":"story","value":"Авторизация с корректными данными проходит успешно"},{"name":"severity","value":"critical"},{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_login_page"},{"name":"host","value":"fv-az816-497"},{"name":"thread","value":"2196-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_login_page"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"password","value":"''"},{"name":"username","value":"''"},{"name":"username_desc","value":"'-AB'"}],"links":[{"name":"Задачи U1, U2","url":"Задачи U1, U2","type":"tms"}],"hidden":false,"retry":false,"extra":{"severity":"critical","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"tags":[]},"source":"b1433c552c8d9555.json","parameterValues":["''","''","'-AB'"]}