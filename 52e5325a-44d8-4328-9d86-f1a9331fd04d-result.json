{"name": "Авторизация на странице Login Page", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.InvalidArgumentException: Message: invalid argument\n  (Session info: chrome=131.0.6778.139)\nStacktrace:\n#0 0x559d9fd9831a <unknown>\n#1 0x559d9f8ae53d <unknown>\n#2 0x559d9f89600f <unknown>\n#3 0x559d9f894615 <unknown>\n#4 0x559d9f894d3a <unknown>\n#5 0x559d9f8b1009 <unknown>\n#6 0x559d9f940b35 <unknown>\n#7 0x559d9f921462 <unknown>\n#8 0x559d9f93fed7 <unknown>\n#9 0x559d9f921203 <unknown>\n#10 0x559d9f8efcc0 <unknown>\n#11 0x559d9f8f0c9e <unknown>\n#12 0x559d9fd65d0b <unknown>\n#13 0x559d9fd69c92 <unknown>\n#14 0x559d9fd52b3c <unknown>\n#15 0x559d9fd6a807 <unknown>\n#16 0x559d9fd380df <unknown>\n#17 0x559d9fd87578 <unknown>\n#18 0x559d9fd87740 <unknown>\n#19 0x559d9fd97196 <unknown>\n#20 0x7fde52a9ca94 <unknown>\n#21 0x7fde52b29c3c <unknown>", "trace": "browser = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"787e0e5a9010c702a4e1b798f563c7e1\")>\nusername = 'invalid username', password = '', username_desc = '-AB'\n\n    @allure.severity(severity_level.CRITICAL)\n    @allure.epic(\"Smoke тест\")\n    @allure.feature(\"Авторизация\")\n    @allure.testcase(\"Задачи U1, U2\")\n    @allure.story(\"Авторизация с некорректными данными не проходит\")\n    @allure.title(\"Авторизация на странице Login Page\")\n    @allure.description(\n        \"\"\"\n        Цель: Проверить авторизацию с некорректными данными\n    \n        Предусловие:\n            - Открыть браузер\n    \n        Шаги:\n            1. Открыть страницу с формой\n            2. Ввести данные в поле \"Username\"\n            3. Ввести данные в поле \"Password\"\n            4. Ввести данные в поле \"Username *\"\n            5. Кликнуть кнопку \"Login\"\n            6. Проверить, что отображается сообщение о ошибке авторизации\n    \n        Ожидаемый результат:\n            - Отображается сообщение об ошибке\"\"\")\n    @pytest.mark.parametrize('username, password, username_desc',\n                             [('invalid username', 'invalid password', 'username-C', ),\n                              (LoginData.username, 'invalid password', f'{LoginData.username}-AB'),\n                              ('invalid username', LoginData.password, f'{LoginData.username}-AB')])\n    def test_log_in_invalid(browser: fixture, username: str, password: str, username_desc: str):\n        login_page = LoginPage(browser)\n>       login_page.open_login_page()\n\ntests/test_login_page.py:148: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npages/login_page.py:12: in open_login_page\n    self.open_url(PageUrls.login_page)\npages/base_page.py:14: in open_url\n    self.driver.get(url)\n/opt/hostedtoolcache/Python/3.12.8/x64/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py:393: in get\n    self.execute(Command.GET, {\"url\": url})\n/opt/hostedtoolcache/Python/3.12.8/x64/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py:384: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f17c53994f0>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"invalid argument\",\"message\":\"invalid argument\\\\n  (Session info: chrome=1...\\\\n#19 0x559d9fd97196 \\\\u003Cunknown>\\\\n#20 0x7fde52a9ca94 \\\\u003Cunknown>\\\\n#21 0x7fde52b29c3c \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.InvalidArgumentException: Message: invalid argument\nE         (Session info: chrome=131.0.6778.139)\nE       Stacktrace:\nE       #0 0x559d9fd9831a <unknown>\nE       #1 0x559d9f8ae53d <unknown>\nE       #2 0x559d9f89600f <unknown>\nE       #3 0x559d9f894615 <unknown>\nE       #4 0x559d9f894d3a <unknown>\nE       #5 0x559d9f8b1009 <unknown>\nE       #6 0x559d9f940b35 <unknown>\nE       #7 0x559d9f921462 <unknown>\nE       #8 0x559d9f93fed7 <unknown>\nE       #9 0x559d9f921203 <unknown>\nE       #10 0x559d9f8efcc0 <unknown>\nE       #11 0x559d9f8f0c9e <unknown>\nE       #12 0x559d9fd65d0b <unknown>\nE       #13 0x559d9fd69c92 <unknown>\nE       #14 0x559d9fd52b3c <unknown>\nE       #15 0x559d9fd6a807 <unknown>\nE       #16 0x559d9fd380df <unknown>\nE       #17 0x559d9fd87578 <unknown>\nE       #18 0x559d9fd87740 <unknown>\nE       #19 0x559d9fd97196 <unknown>\nE       #20 0x7fde52a9ca94 <unknown>\nE       #21 0x7fde52b29c3c <unknown>\n\n/opt/hostedtoolcache/Python/3.12.8/x64/lib/python3.12/site-packages/selenium/webdriver/remote/errorhandler.py:232: InvalidArgumentException"}, "description": "\n    Цель: Проверить авторизацию с некорректными данными\n\n    Предусловие:\n        - Открыть браузер\n\n    Шаги:\n        1. Открыть страницу с формой\n        2. Ввести данные в поле \"Username\"\n        3. Ввести данные в поле \"Password\"\n        4. Ввести данные в поле \"Username *\"\n        5. Кликнуть кнопку \"Login\"\n        6. Проверить, что отображается сообщение о ошибке авторизации\n\n    Ожидаемый результат:\n        - Отображается сообщение об ошибке", "steps": [{"name": "Открыть страницу с формой", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.InvalidArgumentException: Message: invalid argument\n  (Session info: chrome=131.0.6778.139)\nStacktrace:\n#0 0x559d9fd9831a <unknown>\n#1 0x559d9f8ae53d <unknown>\n#2 0x559d9f89600f <unknown>\n#3 0x559d9f894615 <unknown>\n#4 0x559d9f894d3a <unknown>\n#5 0x559d9f8b1009 <unknown>\n#6 0x559d9f940b35 <unknown>\n#7 0x559d9f921462 <unknown>\n#8 0x559d9f93fed7 <unknown>\n#9 0x559d9f921203 <unknown>\n#10 0x559d9f8efcc0 <unknown>\n#11 0x559d9f8f0c9e <unknown>\n#12 0x559d9fd65d0b <unknown>\n#13 0x559d9fd69c92 <unknown>\n#14 0x559d9fd52b3c <unknown>\n#15 0x559d9fd6a807 <unknown>\n#16 0x559d9fd380df <unknown>\n#17 0x559d9fd87578 <unknown>\n#18 0x559d9fd87740 <unknown>\n#19 0x559d9fd97196 <unknown>\n#20 0x7fde52a9ca94 <unknown>\n#21 0x7fde52b29c3c <unknown>\n\n", "trace": "  File \"/home/runner/work/internship_u/internship_u/pages/login_page.py\", line 12, in open_login_page\n    self.open_url(PageUrls.login_page)\n  File \"/home/runner/work/internship_u/internship_u/pages/base_page.py\", line 14, in open_url\n    self.driver.get(url)\n  File \"/opt/hostedtoolcache/Python/3.12.8/x64/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py\", line 393, in get\n    self.execute(Command.GET, {\"url\": url})\n  File \"/opt/hostedtoolcache/Python/3.12.8/x64/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py\", line 384, in execute\n    self.error_handler.check_response(response)\n  File \"/opt/hostedtoolcache/Python/3.12.8/x64/lib/python3.12/site-packages/selenium/webdriver/remote/errorhandler.py\", line 232, in check_response\n    raise exception_class(message, screen, stacktrace)\n"}, "start": 1735063658475, "stop": 1735063658484}, {"name": "Скриншот упавшего теста", "status": "passed", "attachments": [{"name": "Test failure screenshot", "source": "5b25fff8-4991-45ac-aa57-aada253260e4-attachment.png", "type": "image/png"}], "start": 1735063658484, "stop": 1735063658591}], "parameters": [{"name": "username", "value": "'invalid username'"}, {"name": "password", "value": "''"}, {"name": "username_desc", "value": "'-AB'"}], "start": 1735063658475, "stop": 1735063658484, "uuid": "c2b8869a-b92c-4863-9068-c3ad4f095108", "historyId": "a00299da9b1facca8b265d63e898c6b4", "testCaseId": "9104403da13d48d6396ff4a9746ff679", "fullName": "tests.test_login_page#test_log_in_invalid", "labels": [{"name": "epic", "value": "Smoke тест"}, {"name": "feature", "value": "Авторизация"}, {"name": "severity", "value": "critical"}, {"name": "story", "value": "Авторизация с некорректными данными не проходит"}, {"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_login_page"}, {"name": "host", "value": "fv-az816-497"}, {"name": "thread", "value": "2196-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_login_page"}], "links": [{"type": "tms", "url": "Задачи U1, U2", "name": "Задачи U1, U2"}]}