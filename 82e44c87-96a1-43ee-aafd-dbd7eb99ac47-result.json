{"name": "Загрузка страницы с Registration Form", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.InvalidArgumentException: Message: invalid argument\n  (Session info: chrome=131.0.6778.139)\nStacktrace:\n#0 0x55fdd9d8831a <unknown>\n#1 0x55fdd989e53d <unknown>\n#2 0x55fdd988600f <unknown>\n#3 0x55fdd9884615 <unknown>\n#4 0x55fdd9884d3a <unknown>\n#5 0x55fdd98a1009 <unknown>\n#6 0x55fdd9930b35 <unknown>\n#7 0x55fdd9911462 <unknown>\n#8 0x55fdd992fed7 <unknown>\n#9 0x55fdd9911203 <unknown>\n#10 0x55fdd98dfcc0 <unknown>\n#11 0x55fdd98e0c9e <unknown>\n#12 0x55fdd9d55d0b <unknown>\n#13 0x55fdd9d59c92 <unknown>\n#14 0x55fdd9d42b3c <unknown>\n#15 0x55fdd9d5a807 <unknown>\n#16 0x55fdd9d280df <unknown>\n#17 0x55fdd9d77578 <unknown>\n#18 0x55fdd9d77740 <unknown>\n#19 0x55fdd9d87196 <unknown>\n#20 0x7f8c2329ca94 <unknown>\n#21 0x7f8c23329c3c <unknown>", "trace": "browser = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"c13ae7f78bd391ce9ad72ca19635e458\")>\n\n    @allure.severity(severity_level.MINOR)\n    @allure.epic(\"Smoke тест\")\n    @allure.feature(\"JavaScriptExecutor\")\n    @allure.testcase(\"Задача U6\")\n    @allure.story(\"Убрать фокус из поля ввода с помощью JavaScriptExecutor\")\n    @allure.title(\"Загрузка страницы с Registration Form\")\n    @allure.description(\n        \"\"\"\n        Цель: Проверить работу JavaScriptExecutor\n    \n        Предусловие:\n            - Открыть браузер\n    \n        Шаги:\n            1. Открыть страницу с формой\n            2. Кликнуть поле ввода \"First Name\"\n            3. Проверить, что фокус на поле ввода\n            4. Убрать фокус из поля ввода с помощью JavaScriptExecutor\n            5. Проверить, что поле ввода не в фокусе\n    \n        Ожидаемый результат:\n            - После выполнения JavaScript поле ввода не в фокусе\"\"\")\n    def test_remove_focus(browser: fixture):\n        registration_page = RegistrationPage(browser)\n>       registration_page.open_form_page()\n\ntests/test_js_executor.py:32: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npages/registration_page.py:12: in open_form_page\n    self.open_url(PageUrls.registration_page)\npages/base_page.py:14: in open_url\n    self.driver.get(url)\n/opt/hostedtoolcache/Python/3.12.8/x64/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py:393: in get\n    self.execute(Command.GET, {\"url\": url})\n/opt/hostedtoolcache/Python/3.12.8/x64/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py:384: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f17c53938c0>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"invalid argument\",\"message\":\"invalid argument\\\\n  (Session info: chrome=1...\\\\n#19 0x55fdd9d87196 \\\\u003Cunknown>\\\\n#20 0x7f8c2329ca94 \\\\u003Cunknown>\\\\n#21 0x7f8c23329c3c \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.InvalidArgumentException: Message: invalid argument\nE         (Session info: chrome=131.0.6778.139)\nE       Stacktrace:\nE       #0 0x55fdd9d8831a <unknown>\nE       #1 0x55fdd989e53d <unknown>\nE       #2 0x55fdd988600f <unknown>\nE       #3 0x55fdd9884615 <unknown>\nE       #4 0x55fdd9884d3a <unknown>\nE       #5 0x55fdd98a1009 <unknown>\nE       #6 0x55fdd9930b35 <unknown>\nE       #7 0x55fdd9911462 <unknown>\nE       #8 0x55fdd992fed7 <unknown>\nE       #9 0x55fdd9911203 <unknown>\nE       #10 0x55fdd98dfcc0 <unknown>\nE       #11 0x55fdd98e0c9e <unknown>\nE       #12 0x55fdd9d55d0b <unknown>\nE       #13 0x55fdd9d59c92 <unknown>\nE       #14 0x55fdd9d42b3c <unknown>\nE       #15 0x55fdd9d5a807 <unknown>\nE       #16 0x55fdd9d280df <unknown>\nE       #17 0x55fdd9d77578 <unknown>\nE       #18 0x55fdd9d77740 <unknown>\nE       #19 0x55fdd9d87196 <unknown>\nE       #20 0x7f8c2329ca94 <unknown>\nE       #21 0x7f8c23329c3c <unknown>\n\n/opt/hostedtoolcache/Python/3.12.8/x64/lib/python3.12/site-packages/selenium/webdriver/remote/errorhandler.py:232: InvalidArgumentException"}, "description": "\n    Цель: Проверить работу JavaScriptExecutor\n\n    Предусловие:\n        - Открыть браузер\n\n    Шаги:\n        1. Открыть страницу с формой\n        2. Кликнуть поле ввода \"First Name\"\n        3. Проверить, что фокус на поле ввода\n        4. Убрать фокус из поля ввода с помощью JavaScriptExecutor\n        5. Проверить, что поле ввода не в фокусе\n\n    Ожидаемый результат:\n        - После выполнения JavaScript поле ввода не в фокусе", "steps": [{"name": "Открыть страницу с формой", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.InvalidArgumentException: Message: invalid argument\n  (Session info: chrome=131.0.6778.139)\nStacktrace:\n#0 0x55fdd9d8831a <unknown>\n#1 0x55fdd989e53d <unknown>\n#2 0x55fdd988600f <unknown>\n#3 0x55fdd9884615 <unknown>\n#4 0x55fdd9884d3a <unknown>\n#5 0x55fdd98a1009 <unknown>\n#6 0x55fdd9930b35 <unknown>\n#7 0x55fdd9911462 <unknown>\n#8 0x55fdd992fed7 <unknown>\n#9 0x55fdd9911203 <unknown>\n#10 0x55fdd98dfcc0 <unknown>\n#11 0x55fdd98e0c9e <unknown>\n#12 0x55fdd9d55d0b <unknown>\n#13 0x55fdd9d59c92 <unknown>\n#14 0x55fdd9d42b3c <unknown>\n#15 0x55fdd9d5a807 <unknown>\n#16 0x55fdd9d280df <unknown>\n#17 0x55fdd9d77578 <unknown>\n#18 0x55fdd9d77740 <unknown>\n#19 0x55fdd9d87196 <unknown>\n#20 0x7f8c2329ca94 <unknown>\n#21 0x7f8c23329c3c <unknown>\n\n", "trace": "  File \"/home/runner/work/internship_u/internship_u/pages/registration_page.py\", line 12, in open_form_page\n    self.open_url(PageUrls.registration_page)\n  File \"/home/runner/work/internship_u/internship_u/pages/base_page.py\", line 14, in open_url\n    self.driver.get(url)\n  File \"/opt/hostedtoolcache/Python/3.12.8/x64/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py\", line 393, in get\n    self.execute(Command.GET, {\"url\": url})\n  File \"/opt/hostedtoolcache/Python/3.12.8/x64/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py\", line 384, in execute\n    self.error_handler.check_response(response)\n  File \"/opt/hostedtoolcache/Python/3.12.8/x64/lib/python3.12/site-packages/selenium/webdriver/remote/errorhandler.py\", line 232, in check_response\n    raise exception_class(message, screen, stacktrace)\n"}, "start": 1735063655159, "stop": 1735063655168}, {"name": "Скриншот упавшего теста", "status": "passed", "attachments": [{"name": "Test failure screenshot", "source": "f6ef987d-6ce6-4758-a3f1-68b3c417898d-attachment.png", "type": "image/png"}], "start": 1735063655169, "stop": 1735063655278}], "start": 1735063655159, "stop": 1735063655169, "uuid": "4cf3a0ec-b02e-4e29-8777-cf86fc9400e9", "historyId": "ac2adf9b366447ab01ceb9c6ab8d88fb", "testCaseId": "ac2adf9b366447ab01ceb9c6ab8d88fb", "fullName": "tests.test_js_executor#test_remove_focus", "labels": [{"name": "story", "value": "Убрать фокус из поля ввода с помощью JavaScriptExecutor"}, {"name": "epic", "value": "Smoke тест"}, {"name": "feature", "value": "JavaScriptExecutor"}, {"name": "severity", "value": "minor"}, {"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_js_executor"}, {"name": "host", "value": "fv-az816-497"}, {"name": "thread", "value": "2196-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_js_executor"}], "links": [{"type": "tms", "url": "Задача U6", "name": "Задача U6"}]}