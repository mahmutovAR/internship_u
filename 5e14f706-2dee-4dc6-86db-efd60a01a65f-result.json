{"name": "Проверка поведения основного меню", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.InvalidArgumentException: Message: invalid argument: 'url' must be a string\n  (Session info: chrome=131.0.6778.139)\nStacktrace:\n#0 0x5629001f931a <unknown>\n#1 0x5628ffd0f6e0 <unknown>\n#2 0x5628ffda1bf3 <unknown>\n#3 0x5628ffd82462 <unknown>\n#4 0x5628ffda0ed7 <unknown>\n#5 0x5628ffd82203 <unknown>\n#6 0x5628ffd50cc0 <unknown>\n#7 0x5628ffd51c9e <unknown>\n#8 0x5629001c6d0b <unknown>\n#9 0x5629001cac92 <unknown>\n#10 0x5629001b3b3c <unknown>\n#11 0x5629001cb807 <unknown>\n#12 0x5629001990df <unknown>\n#13 0x5629001e8578 <unknown>\n#14 0x5629001e8740 <unknown>\n#15 0x5629001f8196 <unknown>\n#16 0x7f31d0c9ca94 <unknown>\n#17 0x7f31d0d29c3c <unknown>", "trace": "browser = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"867d5c3c9deef775ecc828f42e27804d\")>\n\n    @allure.severity(severity_level.MINOR)\n    @allure.epic(\"Smoke тест\")\n    @allure.feature(\"Загрузка страницы\")\n    @allure.testcase(\"Задача U1, U2\")\n    @allure.story(\"Пункты меню отображаются и кликабельны при скроллинге\")\n    @allure.title(\"Проверка поведения основного меню\")\n    @allure.description(\n        \"\"\"\n        Цель: Проверка поведения основного меню в шапке при скроллинге\n    \n        Предусловие:\n            - Открыть браузер\n    \n        Шаги:\n            1. Открыть домашнюю страницу\n            2. Прокрутить страницу до блока \"Footer\"\n            3. Проверить, что основные пункты меню отображаются и кликабельны\n    \n        Ожидаемый результат:\n            - Все основные пункты меню отображаются и кликабельны\"\"\")\n    def test_menu_when_scrolling(browser: fixture):\n        menu = Menu(browser)\n>       menu.open_homepage()\n\ntests/test_menu_when_scrolling.py:30: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npages/home_page.py:16: in open_homepage\n    self.open_url(PageUrls.homepage)\npages/base_page.py:14: in open_url\n    self.driver.get(url)\n/opt/hostedtoolcache/Python/3.12.8/x64/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py:393: in get\n    self.execute(Command.GET, {\"url\": url})\n/opt/hostedtoolcache/Python/3.12.8/x64/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py:384: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7fb9ff19adb0>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"invalid argument\",\"message\":\"invalid argument: \\'url\\' must be a string\\\\...\\\\n#15 0x5629001f8196 \\\\u003Cunknown>\\\\n#16 0x7f31d0c9ca94 \\\\u003Cunknown>\\\\n#17 0x7f31d0d29c3c \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.InvalidArgumentException: Message: invalid argument: 'url' must be a string\nE         (Session info: chrome=131.0.6778.139)\nE       Stacktrace:\nE       #0 0x5629001f931a <unknown>\nE       #1 0x5628ffd0f6e0 <unknown>\nE       #2 0x5628ffda1bf3 <unknown>\nE       #3 0x5628ffd82462 <unknown>\nE       #4 0x5628ffda0ed7 <unknown>\nE       #5 0x5628ffd82203 <unknown>\nE       #6 0x5628ffd50cc0 <unknown>\nE       #7 0x5628ffd51c9e <unknown>\nE       #8 0x5629001c6d0b <unknown>\nE       #9 0x5629001cac92 <unknown>\nE       #10 0x5629001b3b3c <unknown>\nE       #11 0x5629001cb807 <unknown>\nE       #12 0x5629001990df <unknown>\nE       #13 0x5629001e8578 <unknown>\nE       #14 0x5629001e8740 <unknown>\nE       #15 0x5629001f8196 <unknown>\nE       #16 0x7f31d0c9ca94 <unknown>\nE       #17 0x7f31d0d29c3c <unknown>\n\n/opt/hostedtoolcache/Python/3.12.8/x64/lib/python3.12/site-packages/selenium/webdriver/remote/errorhandler.py:232: InvalidArgumentException"}, "description": "\n    Цель: Проверка поведения основного меню в шапке при скроллинге\n\n    Предусловие:\n        - Открыть браузер\n\n    Шаги:\n        1. Открыть домашнюю страницу\n        2. Прокрутить страницу до блока \"Footer\"\n        3. Проверить, что основные пункты меню отображаются и кликабельны\n\n    Ожидаемый результат:\n        - Все основные пункты меню отображаются и кликабельны", "steps": [{"name": "Открыть домашнюю страницу", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.InvalidArgumentException: Message: invalid argument: 'url' must be a string\n  (Session info: chrome=131.0.6778.139)\nStacktrace:\n#0 0x5629001f931a <unknown>\n#1 0x5628ffd0f6e0 <unknown>\n#2 0x5628ffda1bf3 <unknown>\n#3 0x5628ffd82462 <unknown>\n#4 0x5628ffda0ed7 <unknown>\n#5 0x5628ffd82203 <unknown>\n#6 0x5628ffd50cc0 <unknown>\n#7 0x5628ffd51c9e <unknown>\n#8 0x5629001c6d0b <unknown>\n#9 0x5629001cac92 <unknown>\n#10 0x5629001b3b3c <unknown>\n#11 0x5629001cb807 <unknown>\n#12 0x5629001990df <unknown>\n#13 0x5629001e8578 <unknown>\n#14 0x5629001e8740 <unknown>\n#15 0x5629001f8196 <unknown>\n#16 0x7f31d0c9ca94 <unknown>\n#17 0x7f31d0d29c3c <unknown>\n\n", "trace": "  File \"/home/runner/work/internship_u/internship_u/pages/home_page.py\", line 16, in open_homepage\n    self.open_url(PageUrls.homepage)\n  File \"/home/runner/work/internship_u/internship_u/pages/base_page.py\", line 14, in open_url\n    self.driver.get(url)\n  File \"/opt/hostedtoolcache/Python/3.12.8/x64/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py\", line 393, in get\n    self.execute(Command.GET, {\"url\": url})\n  File \"/opt/hostedtoolcache/Python/3.12.8/x64/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py\", line 384, in execute\n    self.error_handler.check_response(response)\n  File \"/opt/hostedtoolcache/Python/3.12.8/x64/lib/python3.12/site-packages/selenium/webdriver/remote/errorhandler.py\", line 232, in check_response\n    raise exception_class(message, screen, stacktrace)\n"}, "start": 1735029730637, "stop": 1735029730644}, {"name": "Скриншот упавшего теста", "status": "passed", "attachments": [{"name": "Test failure screenshot", "source": "1378f6ed-3798-437f-a369-0085ccda0f46-attachment.png", "type": "image/png"}], "start": 1735029730645, "stop": 1735029730740}], "start": 1735029730637, "stop": 1735029730644, "uuid": "ad266164-7391-44a3-bb90-9ad0db1c0fd4", "historyId": "98228964ffade7287d9cbf5bedcbf43e", "testCaseId": "98228964ffade7287d9cbf5bedcbf43e", "fullName": "tests.test_menu_when_scrolling#test_menu_when_scrolling", "labels": [{"name": "feature", "value": "Загрузка страницы"}, {"name": "severity", "value": "minor"}, {"name": "epic", "value": "Smoke тест"}, {"name": "story", "value": "Пункты меню отображаются и кликабельны при скроллинге"}, {"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_menu_when_scrolling"}, {"name": "host", "value": "fv-az1296-983"}, {"name": "thread", "value": "2196-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_menu_when_scrolling"}], "links": [{"type": "tms", "url": "Задача U1, U2", "name": "Задача U1, U2"}]}