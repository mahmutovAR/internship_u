{"uid":"16b6cb2a7933f5ca","name":"Переход по меню на другие страницы","fullName":"tests.test_menu_redirect#test_redirect_to_appium_python","historyId":"02f5b47ea84123e66f30fef9b95bdbc6","time":{"start":1735029729704,"stop":1735029729712,"duration":8},"description":"\n    Цель: Проверка перехода по меню на другие страницы\n\n    Предусловие:\n        - Открыть браузер\n\n    Шаги:\n        1. Открыть домашнюю страницу\n        2. Навести курсор на вкладку меню \"All Courses\"\n        3. Кликнуть пункт \"Appium\"\n        4. Кликнуть пункт \"Appium with Python\"\n        5. Проверить переход на страницу\n        6. Проверить значение \"TITLE\"\n        7. Проверить корректность отображения элементов страницы\n\n    Ожидаемый результат:\n        - Происходит переход на страницу\n        - Значение \"TITLE\" соответствует странице\n        - Элементы, уникальные для этой страницы, активны","descriptionHtml":"<pre><code>Цель: Проверка перехода по меню на другие страницы\n\nПредусловие:\n    - Открыть браузер\n\nШаги:\n    1. Открыть домашнюю страницу\n    2. Навести курсор на вкладку меню &quot;All Courses&quot;\n    3. Кликнуть пункт &quot;Appium&quot;\n    4. Кликнуть пункт &quot;Appium with Python&quot;\n    5. Проверить переход на страницу\n    6. Проверить значение &quot;TITLE&quot;\n    7. Проверить корректность отображения элементов страницы\n\nОжидаемый результат:\n    - Происходит переход на страницу\n    - Значение &quot;TITLE&quot; соответствует странице\n    - Элементы, уникальные для этой страницы, активны\n</code></pre>\n","status":"broken","statusMessage":"selenium.common.exceptions.InvalidArgumentException: Message: invalid argument: 'url' must be a string\n  (Session info: chrome=131.0.6778.139)\nStacktrace:\n#0 0x55efd72ab31a <unknown>\n#1 0x55efd6dc16e0 <unknown>\n#2 0x55efd6e53bf3 <unknown>\n#3 0x55efd6e34462 <unknown>\n#4 0x55efd6e52ed7 <unknown>\n#5 0x55efd6e34203 <unknown>\n#6 0x55efd6e02cc0 <unknown>\n#7 0x55efd6e03c9e <unknown>\n#8 0x55efd7278d0b <unknown>\n#9 0x55efd727cc92 <unknown>\n#10 0x55efd7265b3c <unknown>\n#11 0x55efd727d807 <unknown>\n#12 0x55efd724b0df <unknown>\n#13 0x55efd729a578 <unknown>\n#14 0x55efd729a740 <unknown>\n#15 0x55efd72aa196 <unknown>\n#16 0x7fd9dda9ca94 <unknown>\n#17 0x7fd9ddb29c3c <unknown>","statusTrace":"browser = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"21dcc8c68bd4c69ce470ff6562240122\")>\n\n    @allure.severity(severity_level.NORMAL)\n    @allure.epic(\"Smoke тест\")\n    @allure.feature(\"Переход на страницу по ссылке\")\n    @allure.testcase(\"Задача U1, U2\")\n    @allure.story(\"Переход по ссылке проходит успешно, основные элементы новой страницы отображаются корректно\")\n    @allure.title(\"Переход по меню на другие страницы\")\n    @allure.description(\n        \"\"\"\n        Цель: Проверка перехода по меню на другие страницы\n    \n        Предусловие:\n            - Открыть браузер\n    \n        Шаги:\n            1. Открыть домашнюю страницу\n            2. Навести курсор на вкладку меню \"All Courses\"\n            3. Кликнуть пункт \"Appium\"\n            4. Кликнуть пункт \"Appium with Python\"\n            5. Проверить переход на страницу\n            6. Проверить значение \"TITLE\"\n            7. Проверить корректность отображения элементов страницы\n    \n        Ожидаемый результат:\n            - Происходит переход на страницу\n            - Значение \"TITLE\" соответствует странице\n            - Элементы, уникальные для этой страницы, активны\"\"\")\n    def test_redirect_to_appium_python(browser: fixture):\n        menu = Menu(browser)\n>       menu.open_homepage()\n\ntests/test_menu_redirect.py:36: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npages/home_page.py:16: in open_homepage\n    self.open_url(PageUrls.homepage)\npages/base_page.py:14: in open_url\n    self.driver.get(url)\n/opt/hostedtoolcache/Python/3.12.8/x64/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py:393: in get\n    self.execute(Command.GET, {\"url\": url})\n/opt/hostedtoolcache/Python/3.12.8/x64/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py:384: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7fb9ff18cbf0>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"invalid argument\",\"message\":\"invalid argument: \\'url\\' must be a string\\\\...\\\\n#15 0x55efd72aa196 \\\\u003Cunknown>\\\\n#16 0x7fd9dda9ca94 \\\\u003Cunknown>\\\\n#17 0x7fd9ddb29c3c \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.InvalidArgumentException: Message: invalid argument: 'url' must be a string\nE         (Session info: chrome=131.0.6778.139)\nE       Stacktrace:\nE       #0 0x55efd72ab31a <unknown>\nE       #1 0x55efd6dc16e0 <unknown>\nE       #2 0x55efd6e53bf3 <unknown>\nE       #3 0x55efd6e34462 <unknown>\nE       #4 0x55efd6e52ed7 <unknown>\nE       #5 0x55efd6e34203 <unknown>\nE       #6 0x55efd6e02cc0 <unknown>\nE       #7 0x55efd6e03c9e <unknown>\nE       #8 0x55efd7278d0b <unknown>\nE       #9 0x55efd727cc92 <unknown>\nE       #10 0x55efd7265b3c <unknown>\nE       #11 0x55efd727d807 <unknown>\nE       #12 0x55efd724b0df <unknown>\nE       #13 0x55efd729a578 <unknown>\nE       #14 0x55efd729a740 <unknown>\nE       #15 0x55efd72aa196 <unknown>\nE       #16 0x7fd9dda9ca94 <unknown>\nE       #17 0x7fd9ddb29c3c <unknown>\n\n/opt/hostedtoolcache/Python/3.12.8/x64/lib/python3.12/site-packages/selenium/webdriver/remote/errorhandler.py:232: InvalidArgumentException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"description":"\n    Цель: Проверка перехода по меню на другие страницы\n\n    Предусловие:\n        - Открыть браузер\n\n    Шаги:\n        1. Открыть домашнюю страницу\n        2. Навести курсор на вкладку меню \"All Courses\"\n        3. Кликнуть пункт \"Appium\"\n        4. Кликнуть пункт \"Appium with Python\"\n        5. Проверить переход на страницу\n        6. Проверить значение \"TITLE\"\n        7. Проверить корректность отображения элементов страницы\n\n    Ожидаемый результат:\n        - Происходит переход на страницу\n        - Значение \"TITLE\" соответствует странице\n        - Элементы, уникальные для этой страницы, активны","status":"broken","statusMessage":"selenium.common.exceptions.InvalidArgumentException: Message: invalid argument: 'url' must be a string\n  (Session info: chrome=131.0.6778.139)\nStacktrace:\n#0 0x55efd72ab31a <unknown>\n#1 0x55efd6dc16e0 <unknown>\n#2 0x55efd6e53bf3 <unknown>\n#3 0x55efd6e34462 <unknown>\n#4 0x55efd6e52ed7 <unknown>\n#5 0x55efd6e34203 <unknown>\n#6 0x55efd6e02cc0 <unknown>\n#7 0x55efd6e03c9e <unknown>\n#8 0x55efd7278d0b <unknown>\n#9 0x55efd727cc92 <unknown>\n#10 0x55efd7265b3c <unknown>\n#11 0x55efd727d807 <unknown>\n#12 0x55efd724b0df <unknown>\n#13 0x55efd729a578 <unknown>\n#14 0x55efd729a740 <unknown>\n#15 0x55efd72aa196 <unknown>\n#16 0x7fd9dda9ca94 <unknown>\n#17 0x7fd9ddb29c3c <unknown>","statusTrace":"browser = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"21dcc8c68bd4c69ce470ff6562240122\")>\n\n    @allure.severity(severity_level.NORMAL)\n    @allure.epic(\"Smoke тест\")\n    @allure.feature(\"Переход на страницу по ссылке\")\n    @allure.testcase(\"Задача U1, U2\")\n    @allure.story(\"Переход по ссылке проходит успешно, основные элементы новой страницы отображаются корректно\")\n    @allure.title(\"Переход по меню на другие страницы\")\n    @allure.description(\n        \"\"\"\n        Цель: Проверка перехода по меню на другие страницы\n    \n        Предусловие:\n            - Открыть браузер\n    \n        Шаги:\n            1. Открыть домашнюю страницу\n            2. Навести курсор на вкладку меню \"All Courses\"\n            3. Кликнуть пункт \"Appium\"\n            4. Кликнуть пункт \"Appium with Python\"\n            5. Проверить переход на страницу\n            6. Проверить значение \"TITLE\"\n            7. Проверить корректность отображения элементов страницы\n    \n        Ожидаемый результат:\n            - Происходит переход на страницу\n            - Значение \"TITLE\" соответствует странице\n            - Элементы, уникальные для этой страницы, активны\"\"\")\n    def test_redirect_to_appium_python(browser: fixture):\n        menu = Menu(browser)\n>       menu.open_homepage()\n\ntests/test_menu_redirect.py:36: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npages/home_page.py:16: in open_homepage\n    self.open_url(PageUrls.homepage)\npages/base_page.py:14: in open_url\n    self.driver.get(url)\n/opt/hostedtoolcache/Python/3.12.8/x64/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py:393: in get\n    self.execute(Command.GET, {\"url\": url})\n/opt/hostedtoolcache/Python/3.12.8/x64/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py:384: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7fb9ff18cbf0>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"invalid argument\",\"message\":\"invalid argument: \\'url\\' must be a string\\\\...\\\\n#15 0x55efd72aa196 \\\\u003Cunknown>\\\\n#16 0x7fd9dda9ca94 \\\\u003Cunknown>\\\\n#17 0x7fd9ddb29c3c \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.InvalidArgumentException: Message: invalid argument: 'url' must be a string\nE         (Session info: chrome=131.0.6778.139)\nE       Stacktrace:\nE       #0 0x55efd72ab31a <unknown>\nE       #1 0x55efd6dc16e0 <unknown>\nE       #2 0x55efd6e53bf3 <unknown>\nE       #3 0x55efd6e34462 <unknown>\nE       #4 0x55efd6e52ed7 <unknown>\nE       #5 0x55efd6e34203 <unknown>\nE       #6 0x55efd6e02cc0 <unknown>\nE       #7 0x55efd6e03c9e <unknown>\nE       #8 0x55efd7278d0b <unknown>\nE       #9 0x55efd727cc92 <unknown>\nE       #10 0x55efd7265b3c <unknown>\nE       #11 0x55efd727d807 <unknown>\nE       #12 0x55efd724b0df <unknown>\nE       #13 0x55efd729a578 <unknown>\nE       #14 0x55efd729a740 <unknown>\nE       #15 0x55efd72aa196 <unknown>\nE       #16 0x7fd9dda9ca94 <unknown>\nE       #17 0x7fd9ddb29c3c <unknown>\n\n/opt/hostedtoolcache/Python/3.12.8/x64/lib/python3.12/site-packages/selenium/webdriver/remote/errorhandler.py:232: InvalidArgumentException","steps":[{"name":"Открыть домашнюю страницу","time":{"start":1735029729704,"stop":1735029729712,"duration":8},"status":"broken","statusMessage":"selenium.common.exceptions.InvalidArgumentException: Message: invalid argument: 'url' must be a string\n  (Session info: chrome=131.0.6778.139)\nStacktrace:\n#0 0x55efd72ab31a <unknown>\n#1 0x55efd6dc16e0 <unknown>\n#2 0x55efd6e53bf3 <unknown>\n#3 0x55efd6e34462 <unknown>\n#4 0x55efd6e52ed7 <unknown>\n#5 0x55efd6e34203 <unknown>\n#6 0x55efd6e02cc0 <unknown>\n#7 0x55efd6e03c9e <unknown>\n#8 0x55efd7278d0b <unknown>\n#9 0x55efd727cc92 <unknown>\n#10 0x55efd7265b3c <unknown>\n#11 0x55efd727d807 <unknown>\n#12 0x55efd724b0df <unknown>\n#13 0x55efd729a578 <unknown>\n#14 0x55efd729a740 <unknown>\n#15 0x55efd72aa196 <unknown>\n#16 0x7fd9dda9ca94 <unknown>\n#17 0x7fd9ddb29c3c <unknown>\n\n","statusTrace":"  File \"/home/runner/work/internship_u/internship_u/pages/home_page.py\", line 16, in open_homepage\n    self.open_url(PageUrls.homepage)\n  File \"/home/runner/work/internship_u/internship_u/pages/base_page.py\", line 14, in open_url\n    self.driver.get(url)\n  File \"/opt/hostedtoolcache/Python/3.12.8/x64/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py\", line 393, in get\n    self.execute(Command.GET, {\"url\": url})\n  File \"/opt/hostedtoolcache/Python/3.12.8/x64/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py\", line 384, in execute\n    self.error_handler.check_response(response)\n  File \"/opt/hostedtoolcache/Python/3.12.8/x64/lib/python3.12/site-packages/selenium/webdriver/remote/errorhandler.py\", line 232, in check_response\n    raise exception_class(message, screen, stacktrace)\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true},{"name":"Скриншот упавшего теста","time":{"start":1735029729712,"stop":1735029729806,"duration":94},"status":"passed","steps":[],"attachments":[{"name":"Test failure screenshot","type":"image/png","size":0}],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":1,"hasContent":true}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":2,"attachmentsCount":1,"hasContent":true},"afterStages":[],"labels":[{"name":"story","value":"Переход по ссылке проходит успешно, основные элементы новой страницы отображаются корректно"},{"name":"feature","value":"Переход на страницу по ссылке"},{"name":"epic","value":"Smoke тест"},{"name":"severity","value":"normal"},{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_menu_redirect"},{"name":"host","value":"fv-az1296-983"},{"name":"thread","value":"2196-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_menu_redirect"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[{"name":"Задача U1, U2","url":"Задача U1, U2","type":"tms"}],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"tags":[]},"source":"16b6cb2a7933f5ca.json","parameterValues":[]}